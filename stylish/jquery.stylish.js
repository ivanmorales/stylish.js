// Generated by CoffeeScript 1.6.2
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

(function($, window) {
  var Stylish, selectors, templates;

  selectors = {
    modeClass: 'stylish-mode',
    wrapperClass: 'stylish-wrapper',
    inputSelectorClass: 'input-selector',
    inputStyleClass: 'input-style'
  };
  templates = {
    hoverWrapper: "<div class=\"" + selectors.wrapperClass + "\"></div>",
    dialog: "<div class=\"stylish popover bottom\">\n	<div class=\"arrow\"></div>\n\n	<div class=\"popover-content\">\n		<small class=\"muted size\"></small>\n		<p>Selector</p>\n		<input type=\"text\" class=\"" + selectors.inputSelectorClass + " input-medium pull-left\" />\n		<div class=\"btn-toolbar pull-left selector-level\">\n			<div class=\"btn-group\">\n				<a class=\"btn btn-mini select-up\" href=\"#\"><i class=\"icon-circle-arrow-up\"></i></a>\n				<a class=\"btn btn-mini select-down\" href=\"#\"><i class=\"icon-circle-arrow-down\"></i></a>\n			</div>\n		</div>\n		<textarea rows=\"3\" class=\"" + selectors.inputStyleClass + " input-large\"></textarea>\n		<div class=\"text-center\">\n			<button class=\"btn btn-save\">Save</button>\n		</div>\n	</div>\n</div>"
  };
  Stylish = (function() {
    Stylish.prototype.active = false;

    Stylish.prototype.editing = false;

    Stylish.prototype.settings = {};

    Stylish.prototype.$container = void 0;

    Stylish.prototype.$element = void 0;

    Stylish.prototype.$wrapper = void 0;

    Stylish.prototype.$dialog = void 0;

    function Stylish(container, options) {
      this.saveStyles = __bind(this.saveStyles, this);
      this.changeLevel = __bind(this.changeLevel, this);
      this.displayEditor = __bind(this.displayEditor, this);
      this.displayOver = __bind(this.displayOver, this);
      this.getCompleteSelector = __bind(this.getCompleteSelector, this);      this.init(container, options);
    }

    Stylish.prototype.init = function(container, options) {
      var active;

      if (typeof options === 'string') {
        options = {
          post: options
        };
      }
      this.settings = $.extend({}, this.defaults, options);
      if (!this.settings.post) {
        throw Error('You need to define the \'post\' parameter.');
      }
      this.$container = $(container);
      if (this.$container.is(document) || this.$container.is(window)) {
        this.$container = $('body');
      }
      this.$container.append(templates.hoverWrapper).append(templates.dialog);
      this.$wrapper = $(this.$container).children("." + selectors.wrapperClass);
      this.$dialog = $(this.$container).children('.stylish.popover');
      active = true;
      this.$container.addClass(selectors.modeClass);
      this.$container.on('mouseover', '*', this.displayOver);
      this.$container.on('click', '*', this.displayEditor);
      this.$dialog.on('click', '.selector-level .btn', this.changeLevel);
      this.$dialog.on('click', '.btn-save', this.saveStyles);
      return $.ajax({
        url: this.settings.post,
        data: {
          json: 1
        },
        type: 'GET',
        success: this.setStyleData
      });
    };

    Stylish.prototype.getSelector = function($element) {
      var classNames, id, selector;

      selector = $element[0].nodeName;
      id = $element.attr('id');
      classNames = $element.attr('class');
      if (id) {
        selector += "#" + id;
      }
      if (classNames) {
        selector += "." + ($.trim(classNames).replace(/\s/gi, '.'));
      }
      return selector.toLowerCase();
    };

    Stylish.prototype.getCompleteSelector = function($element, level) {
      var current, parents, selector,
        _this = this;

      parents = $element.parents().map(function(index, element) {
        if (index < level) {
          return _this.getSelector($(element));
        }
      }).get().reverse().join(' > ');
      current = this.getSelector($element);
      selector = parents ? "" + parents + " > " + current : "" + current;
      return selector.replace("." + selectors.modeClass, '');
    };

    Stylish.prototype.css2Json = function(cssText) {
      var attribute, attributes, index, line, obj, value, _i, _len;

      obj = {};
      attributes = cssText.replace('\n', '').split(';');
      attributes.pop();
      for (_i = 0, _len = attributes.length; _i < _len; _i++) {
        line = attributes[_i];
        index = line.indexOf(':');
        attribute = $.trim(line.substring(0, index));
        value = $.trim(line.substr(index + 1)).replace(';', '');
        obj[attribute] = value;
      }
      return obj;
    };

    Stylish.prototype.json2Css = function(cssJson) {
      var attribute, style, value;

      style = "";
      for (attribute in cssJson) {
        value = cssJson[attribute];
        style += "" + attribute + ": " + value + ";\n";
      }
      return style;
    };

    Stylish.prototype.on = function() {
      this.active = true;
      return this.$wrapper.show();
    };

    Stylish.prototype.off = function() {
      this.active = false;
      return this.$wrapper.hide();
    };

    Stylish.prototype.toggle = function() {
      if (this.active) {
        return this.off();
      } else {
        return this.on();
      }
    };

    Stylish.prototype.destroy = function() {
      this.$wrapper.remove();
      this.$container.off('mouseover', '*', this.displayOver);
      this.$container.off('click', '*', this.displayEditor);
      this.$dialog.off('click', '.selector-level .btn', this.changeLevel);
      this.$dialog.off('click', '.btn-save', this.saveStyles);
      return this.$container.data('stylish', null);
    };

    Stylish.prototype.setStyleData = function(styles) {
      var data, selector, style;

      for (selector in styles) {
        style = styles[selector];
        data = $(selector).data('style');
        if (!(data instanceof Array)) {
          data = [];
        }
        data.push({
          selector: selector,
          style: style
        });
        $(selector).data('style', data);
      }
      return void 0;
    };

    Stylish.prototype.displayOver = function(e) {
      var $this;

      if (!this.active || this.editing) {
        return;
      }
      $this = $(e.target);
      this.$wrapper.width($this.outerWidth());
      this.$wrapper.height($this.outerHeight());
      this.$wrapper.offset($this.offset());
      return this.$wrapper.show();
    };

    Stylish.prototype.displayEditor = function(e) {
      var $this, selector, styleText, styles;

      e.preventDefault();
      e.stopPropagation();
      if (!this.active) {
        return;
      }
      $this = $(e.target);
      if (this.editing) {
        if ($this.is('.stylish.popover') || $this.parents('.stylish.popover').size() > 0) {
          return;
        } else {
          this.editing = false;
          this.$element = null;
          this.$dialog.hide();
          return;
        }
      }
      this.editing = true;
      this.$element = $this;
      if (this.$element.data('style')) {
        styles = this.$element.data('style');
        selector = styles[0].selector;
        styleText = this.json2Css(styles[0].style);
      } else {
        selector = this.getCompleteSelector($this, 0);
        styleText = "";
      }
      this.$dialog.find("." + selectors.inputSelectorClass).val(selector);
      this.$dialog.find('.size').html("" + ($this.width()) + "px x " + ($this.height()) + "px");
      this.$dialog.find("." + selectors.inputStyleClass).val(styleText);
      return this.$dialog.show().offset({
        top: $this.offset().top + $this.height() + 7,
        left: $this.offset().left + 15
      });
    };

    Stylish.prototype.changeLevel = function(e) {
      var $this, level;

      $this = $(e.currentTarget);
      level = this.$element.data('level') || 0;
      if ($this.is('.select-up')) {
        if (level < this.$element.parents().size()) {
          level++;
        }
      } else {
        if (level > 0) {
          level--;
        }
      }
      this.$dialog.find("." + selectors.inputSelectorClass).val(this.getCompleteSelector(this.$element, level));
      return this.$element.data('level', level);
    };

    Stylish.prototype.saveStyles = function(e) {
      var cssText, selector, value;

      cssText = this.$dialog.find("." + selectors.inputStyleClass).val().replace('\n', ' ');
      selector = this.$dialog.find("." + selectors.inputSelectorClass).val();
      value = this.css2Json(cssText);
      return $.ajax({
        url: this.settings.post,
        data: {
          selector: selector,
          value: value
        },
        type: 'POST',
        success: function() {
          return $(selector).css(value);
        },
        error: function() {}
      });
    };

    return Stylish;

  })();
  $.fn.stylish = function(options) {
    return this.each(function() {
      var data, plugin;

      data = $(this).data('stylish');
      if (data === void 0) {
        plugin = new Stylish(this, options);
        return $(this).data('stylish', plugin);
      } else {
        if (typeof options === 'string') {
          return data[options]();
        }
      }
    });
  };
  Stylish.prototype.defaults = {
    post: void 0
  };
  return void 0;
})(jQuery, window);

/*
//@ sourceMappingURL=jquery.stylish.map
*/
